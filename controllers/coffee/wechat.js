// Generated by CoffeeScript 1.7.1
(function() {
  var BufferHelper, EventProxy, Message, OneTwo, QAlist, Segment, User, checkMessage, checkSignature, config, crypto, formatMessage, fs, getMessage, getParse, isEmpty, path, qs, segWord, url, xml2js;

  User = require('../proxy').User;

  Message = require('../proxy').Message;

  QAlist = require('../proxy').QAlist;

  OneTwo = require('../proxy').OneTwo;

  fs = require('fs');

  path = require('path');

  crypto = require('crypto');

  xml2js = require('xml2js');

  url = require('url');

  qs = require('querystring');

  BufferHelper = require('bufferhelper');

  EventProxy = require('eventproxy');

  config = require('../config').config;

  Segment = require('segment').Segment;

  segWord = new Segment();

  segWord.use('URLTokenizer').use('WildcardTokenizer').use('PunctuationTokenizer').use('DictTokenizer').use('ChsNameTokenizer').use('EmailOptimizer').use('ChsNameOptimizer').use('DictOptimizer').use('DatetimeOptimizer').use('ForeignTokenizer').loadDict('dict.txt').loadDict('dict2.txt').loadDict(path.resolve("./dicts/carnames.txt")).loadDict('names.txt').loadDict('wildcard.txt', 'WILDCARD', true);

  checkSignature = function(query, token) {
    var arr, nonce, shasum, signature, timestamp;
    signature = query.signature;
    timestamp = query.timestamp;
    nonce = query.nonce;
    shasum = crypto.createHash('sha1');
    arr = [token, timestamp, nonce].sort();
    shasum.update(arr.join(''));
    return shasum.digest('hex') === signature;
  };

  getParse = function(req) {
    var query;
    query = url.parse(req.url).query;
    return qs.parse(query);
  };

  isEmpty = function(thing) {
    return typeof thing === "object" && (thing !== null) && Object.keys(thing).length === 0;
  };

  getMessage = function(stream, callback) {
    var buf;
    buf = new BufferHelper();
    return buf.load(stream, function(err, buf) {
      var xml;
      if (err) {
        return callback(err);
      }
      xml = buf.toString('utf-8');
      return xml2js.parseString(xml, {
        trim: true
      }, callback);
    });
  };

  formatMessage = function(result) {
    var key, message, val;
    message = {};
    if (!result) {
      return false;
    }
    for (key in result.xml) {
      val = result.xml[key][0];
      message[key] = (isEmpty(val) ? '' : val).trim();
    }
    return message;
  };

  checkMessage = function(message, callback) {
    var img;
    switch (message.MsgType) {
      case 'text':
        console.log('文字信息');
        if (Special(message.Content, message.FromUserName)) {
          return getAnswer(message.Content, message.FromUserName, callback);
        }
        return getQA(message.Content, message.FromUserName, callback);
      case 'image':
        console.log('图片信息');
        img = {
          name: "返回收到图片信息.",
          key: "1",
          type: "text",
          backContent: ""
        };
        callback(img);
        return img;
      case 'voice':
        console.log('声音信息');
        return null;
        return tranStr(message, go_process(message.Recognition, callback));
      case 'video':
        console.log('视频信息');
        return null;
      case 'location':
        console.log('地理信息');
        return null;
      case 'link':
        console.log('连接消息');
        return null;
      case 'event':
        if (message.Event === 'subscribe') {
          return go_subscribe(message, callback);
        }
        return null;
    }
    return null;
  };

  exports.index = function(req, res, next) {
    var allDone, backup, parse, to;
    parse = getParse(req);
    backup = req.query.code;
    to = checkSignature(parse, config.wechat_token);
    allDone = new EventProxy();
    allDone.all('backMsg', 'message', function(backMsg, message) {
      if (!message) {
        return res.send(to ? parse.echostr : "what?");
      }
      if (backMsg != null) {
        if (backMsg.type === "text") {
          if (backMsg.random != null) {
            backMsg.backContent = backMsg.random[Math.round(Math.random() * (backMsg.random.length - 1))];
          }
          res.render('wechat-text', {
            toUser: message.FromUserName,
            fromUser: message.ToUserName,
            date: new Date().getTime(),
            content: backMsg.backContent
          });
        }
        if (backMsg.type === 'news') {
          console.log("news run");
          res.render('wechat-news', {
            toUser: message.FromUserName,
            fromUser: message.ToUserName,
            date: new Date().getTime(),
            title: backMsg.title,
            description: backMsg.description,
            picurl: backMsg.picurl,
            url: backMsg.url
          });
        }
        if (backMsg.evt != null) {
          return backMsg.evt(message.FromUserName, backup);
        }
      } else {
        return res.render('wechat-text', {
          toUser: message.FromUserName,
          fromUser: message.ToUserName,
          date: new Date().getTime(),
          content: ""
        });
      }
    });
    return getMessage(req, function(err, result) {
      var message;
      if (err) {
        console.log(err);
      }
      if (!result) {
        return res.send(to ? parse.echostr : "what?");
      }
      message = formatMessage(result);
      allDone.emit('message', message);
      return checkMessage(message, function(back) {
        console.log("back To: ", back);
        return allDone.emit('backMsg', back);
      });
    });
  };

  exports.word = function(req, res, next) {
    var word;
    word = segWord.doSegment("我叫李泓桥,我要预约试驾奥迪SQ5,我想三年之内买车.");
    word.sort(function(a, b) {
      return b.p - a.p;
    });
    console.log(word);
    return res.send("contents");
  };

}).call(this);
